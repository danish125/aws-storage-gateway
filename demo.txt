# Choose one version line — here we use v15
BASE_URL="https://download.postgresql.org/pub/repos/yum/15/redhat/rhel-7-x86_64"

mkdir -p pgsql15 && cd pgsql15
curl -O "$BASE_URL/postgresql15-libs-*.x86_64.rpm"
curl -O "$BASE_URL/postgresql15-*.x86_64.rpm"
ls -1


  aws s3 cp . s3://<your-bucket>/pg/15/ --recursive


  mkdir -p /tmp/pg && cd /tmp/pg
aws s3 cp s3://<your-bucket>/pg/15/ . --recursive
ls -1


  sudo rpm -Uvh postgresql15-libs-*.x86_64.rpm
sudo rpm -Uvh postgresql15-*.x86_64.rpm



  sudo yum localinstall -y *.rpm


  echo 'export PATH=/usr/pgsql-15/bin:$PATH' | sudo tee /etc/profile.d/pgsql15.sh
source /etc/profile.d/pgsql15.sh

  psql --version


  psql -h <host> -p 5432 -U <user> -d <db>
# or run a one-off command
psql "host=<host> user=<user> dbname=<db>" -c "SELECT version();"




BASE="https://download.postgresql.org/pub/repos/yum/15/redhat/rhel-7-x86_64"
curl -fLO "$BASE/postgresql15-libs-15.14-1PGDG.rhel7.x86_64.rpm"
curl -fLO "$BASE/postgresql15-15.14-1PGDG.rhel7.x86_64.rpm"

# Sanity check: these MUST say “RPM” (not HTML)
file postgresql15-*.rpm
rpm -qp --info postgresql15-15.14-1PGDG.rhel7.x86_64.rpm





aws s3 cp postgresql15-libs-15.14-1PGDG.rhel7.x86_64.rpm s3://<your-bucket>/pg/
aws s3 cp postgresql15-15.14-1PGDG.rhel7.x86_64.rpm        s3://<your-bucket>/pg/




mkdir -p /tmp/pg && cd /tmp/pg
aws s3 cp s3://<your-bucket>/pg/ . --recursive

# Install libs first, then client (exact filenames, no wildcards)
sudo rpm -Uvh postgresql15-libs-15.14-1PGDG.rhel7.x86_64.rpm postgresql15-15.14-1PGDG.rhel7.x86_64.rpm




sudo rpm -Uvh *.rpm    # when you’ve staged all required deps locally




echo 'export PATH=/usr/pgsql-15/bin:$PATH' | sudo tee /etc/profile.d/pgsql15.sh
source /etc/profile.d/pgsql15.sh
psql --version





curl -fLO https://archives.fedoraproject.org/pub/archive/epel/7/x86_64/Packages/l/libzstd-1.5.5-1.el7.x86_64.rpm
aws s3 cp libzstd-1.5.5-1.el7.x86_64.rpm s3://<your-bucket>/pg/deps/



mkdir -p /tmp/pg && cd /tmp/pg
aws s3 cp s3://<your-bucket>/pg/deps/libzstd-1.5.5-1.el7.x86_64.rpm .

# install the dependency
sudo rpm -Uvh libzstd-1.5.5-1.el7.x86_64.rpm

# now install the PGDG client (use your exact filenames)
sudo rpm -Uvh postgresql15-libs-15.14-1PGDG.rhel7.x86_64.rpm postgresql15-15.14-1PGDG.rhel7.x86_64.rpm




rpm -qpR postgresql15-15.14-1PGDG.rhel7.x86_64.rpm
rpm -qpR postgresql15-libs-15.14-1PGDG.rhel7.x86_64.rpm



ldd /usr/pgsql-15/bin/psql | grep 'not found' || echo "All good"



sudo yum localinstall -y *.rpm   # resolves from local folder only




-- list_dbs.sql
SELECT datname
FROM pg_database
WHERE datistemplate = false
ORDER BY datname;


export PGPASSWORD='your_password'
psql -h DB_HOST -p 5432 -U DB_USER -d postgres -At -f /path/to/list_dbs.sql


export PGPASSWORD='your_password'
psql -h DB_HOST -p 5432 -U DB_USER -d postgres -At -f /path/to/list_dbs.sql










\set ON_ERROR_STOP on
\pset tuples_only on
\pset format unaligned

-- customize if needed
\set user   'testuser'
\set role   'rw_tester_role'
\set schema 'appschema'

\echo '== Checking user exists & can login =='
SELECT CASE WHEN EXISTS (
  SELECT 1 FROM pg_roles WHERE rolname = :'user' AND rolcanlogin
) THEN 1 ELSE 0 END AS ok_user \gset
\if :ok_user != 1
  \echo 'FAIL: user does not exist or cannot login -> ' :user
  \q 10
\endif

\echo '== Checking role exists =='
SELECT CASE WHEN EXISTS (
  SELECT 1 FROM pg_roles WHERE rolname = :'role'
) THEN 1 ELSE 0 END AS ok_role \gset
\if :ok_role != 1
  \echo 'FAIL: role not found -> ' :role
  \q 11
\endif

\echo '== Checking membership (user is member of role) =='
SELECT CASE WHEN pg_has_role(:'user', :'role', 'member')
  THEN 1 ELSE 0 END AS ok_member \gset
\if :ok_member != 1
  \echo 'FAIL: ' :user ' is NOT a member of role ' :role
  \q 12
\endif

\echo '== Checking CONNECT privilege on current database =='
SELECT CASE WHEN has_database_privilege(:'user', current_database(), 'CONNECT')
  THEN 1 ELSE 0 END AS ok_connect \gset
\if :ok_connect != 1
  \echo 'FAIL: user lacks CONNECT on DB ' :DBNAME
  \q 13
\endif

\echo '== Checking schema exists =='
SELECT CASE WHEN EXISTS (
  SELECT 1 FROM pg_namespace WHERE nspname = :'schema'
) THEN 1 ELSE 0 END AS ok_schema \gset
\if :ok_schema != 1
  \echo 'FAIL: schema not found -> ' :schema
  \q 14
\endif

\echo '== Checking USAGE on schema (user or role) =='
SELECT CASE WHEN
  has_schema_privilege(:'user', :'schema', 'USAGE')
  OR has_schema_privilege(:'role', :'schema', 'USAGE')
THEN 1 ELSE 0 END AS ok_usage \gset
\if :ok_usage != 1
  \echo 'FAIL: neither user nor role has USAGE on schema ' :schema
  \q 15
\endif

\echo 'All checks passed ✅'
\echo 'Summary:'
SELECT :'user' AS "user",
       :'role' AS "role",
       current_database() AS "database",
       :'schema' AS "schema";


